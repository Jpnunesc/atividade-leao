(function (global) {function maskCPF(value) {return value .replace(/\D/g, '') .slice(0, 11) .replace(/(\d{3})(\d)/, '$1.$2') .replace(/(\d{3})(\d)/, '$1.$2') .replace(/(\d{3})(\d{1,2})$/, '$1-$2');} function maskPhone(value) {return value .replace(/\D/g, '') .slice(0, 11) .replace(/(\d{2})(\d)/, '($1) $2') .replace(/(\d{5})(\d{1,4})$/, '$1-$2');} function maskCEP(value) {return value .replace(/\D/g, '') .slice(0, 8) .replace(/(\d{5})(\d{1,3})$/, '$1-$2');} global.AppMasks = {maskCPF, maskPhone, maskCEP};})(window);(function (global) {function setAriaInvalid(input, isInvalid) {input.setAttribute('aria-invalid', String(isInvalid));} function ensureMessageElement(input) {const container = input.closest('.form-group') || input.parentElement;let message = container ? container.querySelector('.input-error') : null;if (!message && container) {message = document.createElement('span');message.className = 'input-error';message.setAttribute('role', 'alert');message.id = `${input.id}-erro`;message.hidden = true;container.appendChild(message);} if (message) {const describedby = input.getAttribute('aria-describedby') || '';if (!describedby.includes(message.id)) {input.setAttribute('aria-describedby', describedby ? `${describedby} ${message.id}` : message.id);}} return message;} function displayValidationState(input) {const message = ensureMessageElement(input);if (input.validity.valid) {setAriaInvalid(input, false);if (message) {message.textContent = '';message.hidden = true;} return true;} setAriaInvalid(input, true);if (message) {let text = 'Campo inválido.';if (input.validity.valueMissing) {text = 'Este campo é obrigatório.';} else if (input.validity.typeMismatch) {text = 'Verifique o formato informado.';} else if (input.validity.patternMismatch) {text = 'O formato informado não corresponde ao padrão solicitado.';} else if (input.validity.rangeUnderflow || input.validity.rangeOverflow) {text = 'O valor informado está fora do intervalo permitido.';} message.textContent = text;message.hidden = false;} return false;} function attachValidationHandlers(form) {const inputs = Array.from(form.querySelectorAll('input, select, textarea'));inputs.forEach((input) => {input.addEventListener('blur', () => displayValidationState(input));input.addEventListener('input', () => displayValidationState(input));});} global.AppValidate = {displayValidationState, attachValidationHandlers};})(window);(function (window, document) {const {maskCPF, maskPhone, maskCEP} = window.AppMasks || {};const {attachValidationHandlers, displayValidationState} = window.AppValidate || {};function toggleNavigation() {const toggle = document.querySelector('.nav-toggle');const nav = document.querySelector('.main-nav');if (!toggle || !nav) return;toggle.addEventListener('click', () => {const isOpen = nav.classList.toggle('open');toggle.setAttribute('aria-expanded', String(isOpen));});nav.addEventListener('click', (event) => {if (event.target instanceof HTMLAnchorElement && window.innerWidth < 480) {nav.classList.remove('open');toggle.setAttribute('aria-expanded', 'false');}});} function initCurrentYear() {const yearSpans = document.querySelectorAll('#ano-atual');const year = new Date().getFullYear();yearSpans.forEach((span) => {span.textContent = String(year);});} function initForm() {const form = document.getElementById('cadastro-form');if (!form) return;const submitButton = form.querySelector('#enviar');const feedback = form.querySelector('.form-feedback');attachValidationHandlers?.(form);const cpfInput = form.querySelector('#cpf');const phoneInput = form.querySelector('#telefone');const cepInput = form.querySelector('#cep');function applyMask(event, maskFn) {if (!maskFn) return;const {target} = event;if (target instanceof HTMLInputElement) {target.value = maskFn(target.value);}} cpfInput?.addEventListener('input', (event) => applyMask(event, maskCPF));phoneInput?.addEventListener('input', (event) => applyMask(event, maskPhone));cepInput?.addEventListener('input', (event) => applyMask(event, maskCEP));form.addEventListener('input', () => {const isValid = form.checkValidity();if (submitButton instanceof HTMLButtonElement) {submitButton.disabled = !isValid;}});form.addEventListener('submit', (event) => {event.preventDefault();const fields = Array.from(form.querySelectorAll('input, select'));const allValid = fields.every((field) => displayValidationState?.(field));if (!allValid) {if (feedback) {feedback.textContent = 'Verifique os campos destacados antes de enviar.';feedback.classList.add('is-error');} return;} if (feedback) {feedback.textContent = 'Cadastro enviado com sucesso! Entraremos em contato em breve.';feedback.classList.remove('is-error');} form.reset();if (submitButton instanceof HTMLButtonElement) {submitButton.disabled = true;}});form.addEventListener('reset', () => {window.setTimeout(() => {const inputs = form.querySelectorAll('input, select');inputs.forEach((input) => {input.setAttribute('aria-invalid', 'false');const error = form.querySelector(`#${input.id}-erro`);if (error) {error.textContent = '';error.hidden = true;}});if (feedback) {feedback.textContent = '';feedback.classList.remove('is-error');} if (submitButton instanceof HTMLButtonElement) {submitButton.disabled = true;}}, 0);});} function initFilters() {const filterButtons = document.querySelectorAll('.filter-btn');const cards = document.querySelectorAll('.project-catalog [data-category]');if (!filterButtons.length || !cards.length) return;filterButtons.forEach((button) => {button.addEventListener('click', () => {const category = button.getAttribute('data-filter');filterButtons.forEach((btn) => btn.setAttribute('aria-pressed', String(btn === button)));cards.forEach((card) => {const cardCategory = card.getAttribute('data-category');const shouldShow = category === 'all' || cardCategory === category;card.hidden = !shouldShow;card.classList.toggle('is-hidden', !shouldShow);});});});} function initLazyLoadingFallback() {if ('loading' in HTMLImageElement.prototype) {return;} const images = document.querySelectorAll('img[loading="lazy"]');if ('IntersectionObserver' in window) {const observer = new IntersectionObserver((entries, obs) => {entries.forEach((entry) => {if (entry.isIntersecting) {const img = entry.target;if (img instanceof HTMLImageElement && img.dataset.src) {img.src = img.dataset.src;img.removeAttribute('data-src');} obs.unobserve(entry.target);}});});images.forEach((img) => {if (img instanceof HTMLImageElement) {if (!img.dataset.src) {img.dataset.src = img.src;} observer.observe(img);}});} else {images.forEach((img) => {if (img instanceof HTMLImageElement && img.dataset.src) {img.src = img.dataset.src;}});}} document.addEventListener('DOMContentLoaded', () => {toggleNavigation();initCurrentYear();initForm();initFilters();initLazyLoadingFallback();});})(window, document);